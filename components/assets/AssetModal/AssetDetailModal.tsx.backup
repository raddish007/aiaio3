import React, { useEffect, useState } from 'react';
import { Asset, EditForm } from '@/lib/assets/asset-types';
import { formatDate, formatFileSize, getAssetTypeIcon } from '@/lib/assets/asset-utils';
import { 
  TEMPLATES, 
  PERSONALIZATION_OPTIONS, 
  SAFE_ZONE_OPTIONS, 
  IMAGE_TYPES, 
  ASPECT_RATIOS,
  DEFAULT_EDIT_FORM 
} from '@/lib/assets/asset-constants';

interface AssetDetailModalProps {
  asset: Asset | null;
  isOpen: boolean;
  onClose: () => void;
  onNext?: () => void;
  onPrevious?: () => void;
  onApprove?: (asset: Asset) => void;
  onReject?: (asset: Asset) => void;
  onSave?: (asset: Asset, updates: Partial<EditForm>) => void;
}

// Icon renderer function for asset types
function renderAssetIcon(iconType: string) {
  switch (iconType) {
    case 'image':
      return (
        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      );
    case 'audio':
      return (
        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
        </svg>
      );
    case 'video':
      return (
        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
      );
    case 'prompt':
      return (
        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      );
    default:
      return (
        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      );
  }
}

export function AssetDetailModal({
  asset,
  isOpen,
  onClose,
  onNext,
  onPrevious,
  onApprove,
  onReject,
  onSave,
}: AssetDetailModalProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState<EditForm>(DEFAULT_EDIT_FORM);
  const [hasChanges, setHasChanges] = useState(false);

  // Initialize edit form when asset changes - automatically open in edit mode
  useEffect(() => {
    if (asset) {
      setEditForm({
        title: asset.title || asset.metadata?.title || '',
        theme: asset.theme || '',
        description: asset.metadata?.description || '',
        tags: asset.tags ? asset.tags.join(', ') : '',
        prompt: asset.prompt || asset.metadata?.prompt || '',
        personalization: asset.metadata?.personalization || 'general',
        child_name: asset.metadata?.child_name || '',
        template: asset.metadata?.template || '',
        volume: asset.metadata?.volume || 1.0,
        audio_class: asset.metadata?.audio_class || '',
        letter: asset.metadata?.letter || '',
        imageType: asset.metadata?.imageType || '',
        artStyle: asset.metadata?.artStyle || '',
        aspectRatio: asset.metadata?.aspectRatio || '16:9',
        ageRange: asset.metadata?.ageRange || '',
        safeZone: asset.metadata?.safeZone || 'center_safe',
        targetLetter: asset.metadata?.targetLetter || '',
        additionalContext: asset.metadata?.additionalContext || '',
      });
      setHasChanges(false);
      setIsEditing(true); // Automatically open in edit mode
    }
  }, [asset]);

  const handleFormChange = (field: keyof EditForm, value: any) => {
    setEditForm(prev => ({ ...prev, [field]: value }));
    setHasChanges(true);
  };

  const handleSave = () => {
    if (asset && onSave && hasChanges) {
      onSave(asset, editForm);
      setHasChanges(false);
      setIsEditing(false);
    }
  };

  const handleCancel = () => {
    if (asset) {
      // Reset form to original values
      setEditForm({
        title: asset.title || asset.metadata?.title || '',
        theme: asset.theme || '',
        description: asset.metadata?.description || '',
        tags: asset.tags ? asset.tags.join(', ') : '',
        prompt: asset.prompt || asset.metadata?.prompt || '',
        personalization: asset.metadata?.personalization || 'general',
        child_name: asset.metadata?.child_name || '',
        template: asset.metadata?.template || '',
        volume: asset.metadata?.volume || 1.0,
        audio_class: asset.metadata?.audio_class || '',
        letter: asset.metadata?.letter || '',
        imageType: asset.metadata?.imageType || '',
        artStyle: asset.metadata?.artStyle || '',
        aspectRatio: asset.metadata?.aspectRatio || '16:9',
        ageRange: asset.metadata?.ageRange || '',
        safeZone: asset.metadata?.safeZone || 'center_safe',
        targetLetter: asset.metadata?.targetLetter || '',
        additionalContext: asset.metadata?.additionalContext || '',
      });
      setHasChanges(false);
      setIsEditing(true); // Keep in edit mode
    }
  };
  // Keyboard shortcuts
  useEffect(() => {
    if (!isOpen) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Don't handle shortcuts when in form fields
      if ((e.target as HTMLElement).tagName.match(/INPUT|TEXTAREA|SELECT/)) {
        return;
      }

      switch (e.key) {
        case 'Escape':
          if (hasChanges) {
            // Ask for confirmation if there are unsaved changes
            if (confirm('You have unsaved changes. Are you sure you want to close?')) {
              onClose();
            }
          } else {
            onClose();
          }
          break;
        case 'ArrowLeft':
          onPrevious?.();
          break;
        case 'ArrowRight':
          onNext?.();
          break;
        case 'a':
        case 'A':
          if (asset && onApprove) {
            onApprove(asset);
          }
          break;
        case 'r':
        case 'R':
          if (asset && onReject) {
            onReject(asset);
          }
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, hasChanges, asset, onClose, onNext, onPrevious, onApprove, onReject]);

  if (!isOpen || !asset) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div 
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />
        
        {/* Modal */}
        <div className="relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
          {/* Header */}
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              onClick={onClose}
              className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-600 text-base font-medium text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Close (Esc)
            </button>

            {/* Save Controls */}
            <div className="flex space-x-2 sm:mr-3">
              <button
                onClick={handleSave}
                disabled={!hasChanges}
                className={`inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 sm:text-sm ${
                  hasChanges 
                    ? 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Save Changes
              </button>
              <button
                onClick={handleCancel}
                className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:text-sm"
              >
                Reset
              </button>
            </div>
            
            {/* Navigation */}
            <div className="flex space-x-2 sm:mr-3">
              {onPrevious && (
                <button
                  onClick={onPrevious}
                  className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:text-sm"
                >
                  ← Previous
                </button>
              )}
              {onNext && (
                <button
                  onClick={onNext}
                  className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:text-sm"
                >
                  Next →
                </button>
              )}
            </div>

            {/* Review Actions */}
            {asset?.status === 'pending' && (
              <div className="flex space-x-2 sm:mr-3">
                {onApprove && (
                  <button
                    onClick={() => onApprove(asset)}
                    className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:text-sm"
                  >
                    Approve (A)
                  </button>
                )}
                {onReject && (
                  <button
                    onClick={() => onReject(asset)}
                    className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:text-sm"
                  >
                    Reject (R)
                  </button>
                )}
              </div>
            )}
          </div>

          {/* Content */}
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Left Column - Media Preview */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900">Asset Preview</h3>
                
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  {asset.type === 'image' && asset.file_url ? (
                    <img
                      src={asset.file_url}
                      alt={asset.title || 'Asset'}
                      className="mx-auto max-h-96 max-w-full object-contain rounded"
                    />
                  ) : asset.type === 'video' && asset.file_url ? (
                    <video
                      src={asset.file_url}
                      controls
                      className="mx-auto max-h-96 max-w-full rounded"
                    >
                      Your browser does not support the video tag.
                    </video>
                  ) : asset.type === 'audio' && asset.file_url ? (
                    <div className="space-y-4">
                      <div className="text-gray-400">
                        {renderAssetIcon(getAssetTypeIcon(asset.type))}
                      </div>
                      <audio
                        src={asset.file_url}
                        controls
                        className="mx-auto"
                      >
                        Your browser does not support the audio tag.
                      </audio>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="text-gray-400">
                        {renderAssetIcon(getAssetTypeIcon(asset.type))}
                      </div>
                      <p className="text-gray-500">
                        {asset.file_url ? 'Preview not available' : 'No file URL'}
                      </p>
                    </div>
                  )}
                </div>

                {asset.file_url && (
                  <a
                    href={asset.file_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Download
                  </a>
                )}
              </div>

              {/* Right Column - Metadata */}
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">Asset Details</h3>
                  <span className="text-sm text-blue-600">Edit Mode</span>
                </div>
                
                {/* Edit Form */}
                <div className="space-y-6">
                    {/* Basic Information */}
                    <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                      <h4 className="text-sm font-medium text-gray-900">Basic Information</h4>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                          <input
                            type="text"
                            value={editForm.title}
                            onChange={(e) => handleFormChange('title', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Asset title"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Theme</label>
                          <input
                            type="text"
                            value={editForm.theme}
                            onChange={(e) => handleFormChange('theme', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Theme"
                          />
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea
                          value={editForm.description}
                          onChange={(e) => handleFormChange('description', e.target.value)}
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Asset description"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                        <input
                          type="text"
                          value={editForm.tags}
                          onChange={(e) => handleFormChange('tags', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Comma-separated tags"
                        />
                      </div>
                    </div>

                    {/* Template Configuration */}
                    <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                      <h4 className="text-sm font-medium text-gray-900">Template Configuration</h4>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Template</label>
                          <select
                            value={editForm.template}
                            onChange={(e) => handleFormChange('template', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="">Select template</option>
                            {TEMPLATES.map(template => (
                              <option key={template} value={template}>
                                {template.charAt(0).toUpperCase() + template.slice(1).replace('-', ' ')}
                              </option>
                            ))}
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Personalization</label>
                          <select
                            value={editForm.personalization}
                            onChange={(e) => handleFormChange('personalization', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            {PERSONALIZATION_OPTIONS.map(option => (
                              <option key={option} value={option}>
                                {option.charAt(0).toUpperCase() + option.slice(1)}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Child Name</label>
                          <input
                            type="text"
                            value={editForm.child_name}
                            onChange={(e) => handleFormChange('child_name', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Child's name"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Safe Zone</label>
                          <select
                            value={editForm.safeZone}
                            onChange={(e) => handleFormChange('safeZone', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            {SAFE_ZONE_OPTIONS.map(zone => (
                              <option key={zone} value={zone}>
                                {zone.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                    </div>

                    {/* Type-Specific Fields */}
                    {asset?.type === 'audio' && (
                      <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                        <h4 className="text-sm font-medium text-gray-900">Audio Configuration</h4>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Volume</label>
                            <input
                              type="number"
                              min="0"
                              max="2"
                              step="0.1"
                              value={editForm.volume}
                              onChange={(e) => handleFormChange('volume', parseFloat(e.target.value))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Audio Class</label>
                            <input
                              type="text"
                              value={editForm.audio_class}
                              onChange={(e) => handleFormChange('audio_class', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="Audio classification"
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {asset?.type === 'image' && (
                      <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                        <h4 className="text-sm font-medium text-gray-900">Image Configuration</h4>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Image Type</label>
                            <select
                              value={editForm.imageType}
                              onChange={(e) => handleFormChange('imageType', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            >
                              <option value="">Select image type</option>
                              {IMAGE_TYPES.map(type => (
                                <option key={type} value={type}>
                                  {type.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                                </option>
                              ))}
                            </select>
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Aspect Ratio</label>
                            <select
                              value={editForm.aspectRatio}
                              onChange={(e) => handleFormChange('aspectRatio', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            >
                              {ASPECT_RATIOS.map(ratio => (
                                <option key={ratio} value={ratio}>
                                  {ratio}
                                </option>
                              ))}
                            </select>
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Art Style</label>
                            <input
                              type="text"
                              value={editForm.artStyle}
                              onChange={(e) => handleFormChange('artStyle', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="Art style description"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Age Range</label>
                            <input
                              type="text"
                              value={editForm.ageRange}
                              onChange={(e) => handleFormChange('ageRange', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="Target age range"
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Letter Hunt Specific */}
                    {editForm.template === 'letter-hunt' && (
                      <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                        <h4 className="text-sm font-medium text-gray-900">Letter Hunt Configuration</h4>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Letter</label>
                            <input
                              type="text"
                              maxLength={1}
                              value={editForm.letter}
                              onChange={(e) => handleFormChange('letter', e.target.value.toUpperCase())}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="A"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Target Letter</label>
                            <input
                              type="text"
                              maxLength={1}
                              value={editForm.targetLetter}
                              onChange={(e) => handleFormChange('targetLetter', e.target.value.toUpperCase())}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="A"
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Prompt */}
                    <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                      <h4 className="text-sm font-medium text-gray-900">Generation Prompt</h4>
                      <textarea
                        value={editForm.prompt}
                        onChange={(e) => handleFormChange('prompt', e.target.value)}
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Detailed prompt for asset generation"
                      />
                    </div>

                    {/* Additional Context */}
                    <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                      <h4 className="text-sm font-medium text-gray-900">Additional Context</h4>
                      <textarea
                        value={editForm.additionalContext}
                        onChange={(e) => handleFormChange('additionalContext', e.target.value)}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Additional context or notes"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
